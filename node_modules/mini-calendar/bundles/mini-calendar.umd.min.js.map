{"version":3,"sources":["ng://mini-calendar/lib/mini-calendar.service.ts","ng://mini-calendar/lib/mini-calendar.component.ts","ng://mini-calendar/lib/mini-calendar.module.ts"],"names":["MiniCalendarService","Injectable","args","providedIn","moment","moment_","MiniCalendarComponent","ref","this","mainColor","secondaryColor","selectedDateChange","EventEmitter","prototype","ngOnInit","month","selectedDate","clone","start","date","_removeTime","day","_buildMonth","select","detectChanges","emit","getBgColor","background-color","isInWeek","isToday","opacity","isSame","showWeek","tempMoment","isoWeekday","otherTempMoment","isAfter","isBefore","next","previous","hour","minute","second","millisecond","_buildWeek","days","i","push","name","format","substring","numb","isCurrentMonth","Date","add","weeks","done","monthIndex","count","Component","selector","template","ChangeDetectorRef","Input","Output","MiniCalendarModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MiniCalendarService {\n\n  constructor() { }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport * as moment_ from 'moment';\nconst moment = moment_;\n\n@Component({\n  selector: 'mini-calendar',\n  templateUrl: 'mini-calendar.component.html',\n  styleUrls: ['mini-calendar.component.less']\n})\nexport class MiniCalendarComponent implements OnInit {\n  @Input() mainColor = '#03a9f4';\n  @Input() secondaryColor = '#ff5';\n  @Input() showWeek: boolean;\n  @Input() selectedDate: any;\n  @Output() selectedDateChange = new EventEmitter();\n\n  public month;\n  weeks: any[];\n\n  constructor(private ref: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this.month = moment(this.selectedDate).clone();\n\n    const start = moment(this.selectedDate).clone();\n    start.date(1);\n    this._removeTime(start.day(0));\n\n    this._buildMonth(start, this.month);\n    this.select(moment(this.selectedDate).clone());\n    this.ref.detectChanges();\n  }\n\n  public select(day) {\n    this.selectedDate = day.date;\n    this.selectedDateChange.emit(this.selectedDate);\n  }\n\n  getBgColor(day) {\n    return {\n      'background-color': this.isInWeek(day) ? this.secondaryColor : day.isToday ? this.mainColor : '',\n      'opacity': day.isToday ? '.5' : '1'\n    };\n  }\n\n  public isInWeek(day) {\n    if (this.selectedDate && this.selectedDate.isSame) {\n      if (this.showWeek) {\n        const tempMoment = this.selectedDate.clone();\n        tempMoment.isoWeekday(0);\n        const otherTempMoment = this.selectedDate.clone();\n        otherTempMoment.isoWeekday(7);\n        otherTempMoment.isAfter(day.date);\n        return tempMoment.isSame(day.date) || (tempMoment.isBefore(day.date) && otherTempMoment.isAfter(day.date));\n      } else {\n        return this.selectedDate.isSame(day.date);\n      }\n    }\n    return false;\n  }\n\n  public next() {\n    const next = this.month.clone();\n    this._removeTime(next.month(next.month() + 1).date(1));\n    this.month.month(this.month.month() + 1);\n    this._buildMonth(next, this.month);\n  }\n\n  public previous() {\n    const previous = this.month.clone();\n    this._removeTime(previous.month(previous.month() - 1).date(1));\n    this.month.month(this.month.month() - 1);\n    this._buildMonth(previous, this.month);\n  }\n\n  public _removeTime(date) {\n    return date.day(0).hour(0).minute(0).second(0).millisecond(0);\n  }\n\n  public _buildWeek(date, month) {\n    const days = [];\n    for (let i = 0; i < 7; i++) {\n      days.push({\n        name: date.format('dd').substring(0, 1),\n        numb: date.date(),\n        isCurrentMonth: date.month() === month.month(),\n        isToday: date.isSame(new Date(), 'day'),\n        date: date\n      });\n      date = date.clone();\n      date.add(1, 'd');\n    }\n    return days;\n  }\n\n  public _buildMonth(start, month) {\n    this.weeks = [];\n    const date = start.clone();\n    let done = false, monthIndex = date.month(), count = 0;\n    while (!done) {\n      this.weeks.push({ days: this._buildWeek(date.clone(), month) });\n      date.add(1, 'w');\n      done = count++ > 2 && monthIndex !== date.month();\n      monthIndex = date.month();\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { MiniCalendarComponent } from './mini-calendar.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [MiniCalendarComponent],\n  exports: [MiniCalendarComponent]\n})\nexport class MiniCalendarModule { }\n"]}