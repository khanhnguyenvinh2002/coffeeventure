import { Injectable, Component, Input, Output, EventEmitter, ChangeDetectorRef, NgModule, defineInjectable } from '@angular/core';
import * as moment_ from 'moment';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class MiniCalendarService {
    constructor() { }
}
MiniCalendarService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
MiniCalendarService.ctorParameters = () => [];
/** @nocollapse */ MiniCalendarService.ngInjectableDef = defineInjectable({ factory: function MiniCalendarService_Factory() { return new MiniCalendarService(); }, token: MiniCalendarService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const moment = moment_;
class MiniCalendarComponent {
    /**
     * @param {?} ref
     */
    constructor(ref) {
        this.ref = ref;
        this.mainColor = '#03a9f4';
        this.secondaryColor = '#ff5';
        this.selectedDateChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.month = moment(this.selectedDate).clone();
        /** @type {?} */
        const start = moment(this.selectedDate).clone();
        start.date(1);
        this._removeTime(start.day(0));
        this._buildMonth(start, this.month);
        this.select(moment(this.selectedDate).clone());
        this.ref.detectChanges();
    }
    /**
     * @param {?} day
     * @return {?}
     */
    select(day) {
        this.selectedDate = day.date;
        this.selectedDateChange.emit(this.selectedDate);
    }
    /**
     * @param {?} day
     * @return {?}
     */
    getBgColor(day) {
        return {
            'background-color': this.isInWeek(day) ? this.secondaryColor : day.isToday ? this.mainColor : '',
            'opacity': day.isToday ? '.5' : '1'
        };
    }
    /**
     * @param {?} day
     * @return {?}
     */
    isInWeek(day) {
        if (this.selectedDate && this.selectedDate.isSame) {
            if (this.showWeek) {
                /** @type {?} */
                const tempMoment = this.selectedDate.clone();
                tempMoment.isoWeekday(0);
                /** @type {?} */
                const otherTempMoment = this.selectedDate.clone();
                otherTempMoment.isoWeekday(7);
                otherTempMoment.isAfter(day.date);
                return tempMoment.isSame(day.date) || (tempMoment.isBefore(day.date) && otherTempMoment.isAfter(day.date));
            }
            else {
                return this.selectedDate.isSame(day.date);
            }
        }
        return false;
    }
    /**
     * @return {?}
     */
    next() {
        /** @type {?} */
        const next = this.month.clone();
        this._removeTime(next.month(next.month() + 1).date(1));
        this.month.month(this.month.month() + 1);
        this._buildMonth(next, this.month);
    }
    /**
     * @return {?}
     */
    previous() {
        /** @type {?} */
        const previous = this.month.clone();
        this._removeTime(previous.month(previous.month() - 1).date(1));
        this.month.month(this.month.month() - 1);
        this._buildMonth(previous, this.month);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    _removeTime(date) {
        return date.day(0).hour(0).minute(0).second(0).millisecond(0);
    }
    /**
     * @param {?} date
     * @param {?} month
     * @return {?}
     */
    _buildWeek(date, month) {
        /** @type {?} */
        const days = [];
        for (let i = 0; i < 7; i++) {
            days.push({
                name: date.format('dd').substring(0, 1),
                numb: date.date(),
                isCurrentMonth: date.month() === month.month(),
                isToday: date.isSame(new Date(), 'day'),
                date: date
            });
            date = date.clone();
            date.add(1, 'd');
        }
        return days;
    }
    /**
     * @param {?} start
     * @param {?} month
     * @return {?}
     */
    _buildMonth(start, month) {
        this.weeks = [];
        /** @type {?} */
        const date = start.clone();
        /** @type {?} */
        let done = false;
        /** @type {?} */
        let monthIndex = date.month();
        /** @type {?} */
        let count = 0;
        while (!done) {
            this.weeks.push({ days: this._buildWeek(date.clone(), month) });
            date.add(1, 'w');
            done = count++ > 2 && monthIndex !== date.month();
            monthIndex = date.month();
        }
    }
}
MiniCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'mini-calendar',
                template: "<div class=\"mini-calendar-component\">\n\t<div class=\"header layout-row layout-align-center-center\" [ngStyle]=\"{'background-color': mainColor}\">\n\t\t<i class=\"fas fa-chevron-left\" (click)=\"previous()\"></i>\n\t\t<span>{{month.format(\"MMM YYYY\")}}</span>\n\t\t<i class=\"fas fa-chevron-right\" (click)=\"next()\"></i>\n\t</div>\n\t<div class=\"week\" *ngFor=\"let week of weeks\">\n\t\t<span class=\"day\" [ngStyle]=\"getBgColor(day)\" [ngClass]=\"{ 'different-month': !day.isCurrentMonth }\"\n\t\t\t(click)=\"select(day)\" *ngFor=\"let day of week.days\">{{day.numb}}</span>\n\t</div>\n</div>\n",
                styles: [".border-box{box-sizing:border-box;-moz-box-sizing:border-box}.mini-calendar-component{float:left;display:block;box-sizing:border-box;-moz-box-sizing:border-box;background:#fff;width:190px;border:1px solid #ccc}.mini-calendar-component>div.header{display:flex;justify-content:space-between;width:100%;height:40px;color:#fff;border-bottom:1px solid #ccc}.mini-calendar-component>div.header>*{height:40px;line-height:40px!important;display:inline-block;vertical-align:middle}.mini-calendar-component>div.header>i{float:left;width:30px;font-weight:700;position:relative;box-sizing:border-box;-moz-box-sizing:border-box;padding:0;cursor:pointer}.mini-calendar-component>div.header>span{float:left;font-weight:700;text-transform:uppercase;box-sizing:border-box;-moz-box-sizing:border-box;text-align:center;color:inherit}.mini-calendar-component>div.week{float:left;width:100%}.mini-calendar-component>div.week:first-child{border-top:none}.mini-calendar-component>div.week>span.day{float:left;width:14.28571429%;box-sizing:border-box;-moz-box-sizing:border-box;font-size:.75em;text-align:center;height:30px;line-height:30px!important;display:inline-block;vertical-align:middle;background:#fff;cursor:pointer;color:#000}.mini-calendar-component>div.week>span.day:first-child{border-left:none}.mini-calendar-component>div.week>span.day.different-month{color:silver}"]
            }] }
];
/** @nocollapse */
MiniCalendarComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
MiniCalendarComponent.propDecorators = {
    mainColor: [{ type: Input }],
    secondaryColor: [{ type: Input }],
    showWeek: [{ type: Input }],
    selectedDate: [{ type: Input }],
    selectedDateChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class MiniCalendarModule {
}
MiniCalendarModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [MiniCalendarComponent],
                exports: [MiniCalendarComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { MiniCalendarService, MiniCalendarComponent, MiniCalendarModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluaS1jYWxlbmRhci5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbWluaS1jYWxlbmRhci9saWIvbWluaS1jYWxlbmRhci5zZXJ2aWNlLnRzIiwibmc6Ly9taW5pLWNhbGVuZGFyL2xpYi9taW5pLWNhbGVuZGFyLmNvbXBvbmVudC50cyIsIm5nOi8vbWluaS1jYWxlbmRhci9saWIvbWluaS1jYWxlbmRhci5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBNaW5pQ2FsZW5kYXJTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIG1vbWVudF8gZnJvbSAnbW9tZW50JztcbmNvbnN0IG1vbWVudCA9IG1vbWVudF87XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21pbmktY2FsZW5kYXInLFxuICB0ZW1wbGF0ZVVybDogJ21pbmktY2FsZW5kYXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnbWluaS1jYWxlbmRhci5jb21wb25lbnQubGVzcyddXG59KVxuZXhwb3J0IGNsYXNzIE1pbmlDYWxlbmRhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIG1haW5Db2xvciA9ICcjMDNhOWY0JztcbiAgQElucHV0KCkgc2Vjb25kYXJ5Q29sb3IgPSAnI2ZmNSc7XG4gIEBJbnB1dCgpIHNob3dXZWVrOiBib29sZWFuO1xuICBASW5wdXQoKSBzZWxlY3RlZERhdGU6IGFueTtcbiAgQE91dHB1dCgpIHNlbGVjdGVkRGF0ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBwdWJsaWMgbW9udGg7XG4gIHdlZWtzOiBhbnlbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5tb250aCA9IG1vbWVudCh0aGlzLnNlbGVjdGVkRGF0ZSkuY2xvbmUoKTtcblxuICAgIGNvbnN0IHN0YXJ0ID0gbW9tZW50KHRoaXMuc2VsZWN0ZWREYXRlKS5jbG9uZSgpO1xuICAgIHN0YXJ0LmRhdGUoMSk7XG4gICAgdGhpcy5fcmVtb3ZlVGltZShzdGFydC5kYXkoMCkpO1xuXG4gICAgdGhpcy5fYnVpbGRNb250aChzdGFydCwgdGhpcy5tb250aCk7XG4gICAgdGhpcy5zZWxlY3QobW9tZW50KHRoaXMuc2VsZWN0ZWREYXRlKS5jbG9uZSgpKTtcbiAgICB0aGlzLnJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxuICBwdWJsaWMgc2VsZWN0KGRheSkge1xuICAgIHRoaXMuc2VsZWN0ZWREYXRlID0gZGF5LmRhdGU7XG4gICAgdGhpcy5zZWxlY3RlZERhdGVDaGFuZ2UuZW1pdCh0aGlzLnNlbGVjdGVkRGF0ZSk7XG4gIH1cblxuICBnZXRCZ0NvbG9yKGRheSkge1xuICAgIHJldHVybiB7XG4gICAgICAnYmFja2dyb3VuZC1jb2xvcic6IHRoaXMuaXNJbldlZWsoZGF5KSA/IHRoaXMuc2Vjb25kYXJ5Q29sb3IgOiBkYXkuaXNUb2RheSA/IHRoaXMubWFpbkNvbG9yIDogJycsXG4gICAgICAnb3BhY2l0eSc6IGRheS5pc1RvZGF5ID8gJy41JyA6ICcxJ1xuICAgIH07XG4gIH1cblxuICBwdWJsaWMgaXNJbldlZWsoZGF5KSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0ZWREYXRlICYmIHRoaXMuc2VsZWN0ZWREYXRlLmlzU2FtZSkge1xuICAgICAgaWYgKHRoaXMuc2hvd1dlZWspIHtcbiAgICAgICAgY29uc3QgdGVtcE1vbWVudCA9IHRoaXMuc2VsZWN0ZWREYXRlLmNsb25lKCk7XG4gICAgICAgIHRlbXBNb21lbnQuaXNvV2Vla2RheSgwKTtcbiAgICAgICAgY29uc3Qgb3RoZXJUZW1wTW9tZW50ID0gdGhpcy5zZWxlY3RlZERhdGUuY2xvbmUoKTtcbiAgICAgICAgb3RoZXJUZW1wTW9tZW50Lmlzb1dlZWtkYXkoNyk7XG4gICAgICAgIG90aGVyVGVtcE1vbWVudC5pc0FmdGVyKGRheS5kYXRlKTtcbiAgICAgICAgcmV0dXJuIHRlbXBNb21lbnQuaXNTYW1lKGRheS5kYXRlKSB8fCAodGVtcE1vbWVudC5pc0JlZm9yZShkYXkuZGF0ZSkgJiYgb3RoZXJUZW1wTW9tZW50LmlzQWZ0ZXIoZGF5LmRhdGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkRGF0ZS5pc1NhbWUoZGF5LmRhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgbmV4dCgpIHtcbiAgICBjb25zdCBuZXh0ID0gdGhpcy5tb250aC5jbG9uZSgpO1xuICAgIHRoaXMuX3JlbW92ZVRpbWUobmV4dC5tb250aChuZXh0Lm1vbnRoKCkgKyAxKS5kYXRlKDEpKTtcbiAgICB0aGlzLm1vbnRoLm1vbnRoKHRoaXMubW9udGgubW9udGgoKSArIDEpO1xuICAgIHRoaXMuX2J1aWxkTW9udGgobmV4dCwgdGhpcy5tb250aCk7XG4gIH1cblxuICBwdWJsaWMgcHJldmlvdXMoKSB7XG4gICAgY29uc3QgcHJldmlvdXMgPSB0aGlzLm1vbnRoLmNsb25lKCk7XG4gICAgdGhpcy5fcmVtb3ZlVGltZShwcmV2aW91cy5tb250aChwcmV2aW91cy5tb250aCgpIC0gMSkuZGF0ZSgxKSk7XG4gICAgdGhpcy5tb250aC5tb250aCh0aGlzLm1vbnRoLm1vbnRoKCkgLSAxKTtcbiAgICB0aGlzLl9idWlsZE1vbnRoKHByZXZpb3VzLCB0aGlzLm1vbnRoKTtcbiAgfVxuXG4gIHB1YmxpYyBfcmVtb3ZlVGltZShkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZGF5KDApLmhvdXIoMCkubWludXRlKDApLnNlY29uZCgwKS5taWxsaXNlY29uZCgwKTtcbiAgfVxuXG4gIHB1YmxpYyBfYnVpbGRXZWVrKGRhdGUsIG1vbnRoKSB7XG4gICAgY29uc3QgZGF5cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICBkYXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBkYXRlLmZvcm1hdCgnZGQnKS5zdWJzdHJpbmcoMCwgMSksXG4gICAgICAgIG51bWI6IGRhdGUuZGF0ZSgpLFxuICAgICAgICBpc0N1cnJlbnRNb250aDogZGF0ZS5tb250aCgpID09PSBtb250aC5tb250aCgpLFxuICAgICAgICBpc1RvZGF5OiBkYXRlLmlzU2FtZShuZXcgRGF0ZSgpLCAnZGF5JyksXG4gICAgICAgIGRhdGU6IGRhdGVcbiAgICAgIH0pO1xuICAgICAgZGF0ZSA9IGRhdGUuY2xvbmUoKTtcbiAgICAgIGRhdGUuYWRkKDEsICdkJyk7XG4gICAgfVxuICAgIHJldHVybiBkYXlzO1xuICB9XG5cbiAgcHVibGljIF9idWlsZE1vbnRoKHN0YXJ0LCBtb250aCkge1xuICAgIHRoaXMud2Vla3MgPSBbXTtcbiAgICBjb25zdCBkYXRlID0gc3RhcnQuY2xvbmUoKTtcbiAgICBsZXQgZG9uZSA9IGZhbHNlLCBtb250aEluZGV4ID0gZGF0ZS5tb250aCgpLCBjb3VudCA9IDA7XG4gICAgd2hpbGUgKCFkb25lKSB7XG4gICAgICB0aGlzLndlZWtzLnB1c2goeyBkYXlzOiB0aGlzLl9idWlsZFdlZWsoZGF0ZS5jbG9uZSgpLCBtb250aCkgfSk7XG4gICAgICBkYXRlLmFkZCgxLCAndycpO1xuICAgICAgZG9uZSA9IGNvdW50KysgPiAyICYmIG1vbnRoSW5kZXggIT09IGRhdGUubW9udGgoKTtcbiAgICAgIG1vbnRoSW5kZXggPSBkYXRlLm1vbnRoKCk7XG4gICAgfVxuICB9XG5cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNaW5pQ2FsZW5kYXJDb21wb25lbnQgfSBmcm9tICcuL21pbmktY2FsZW5kYXIuY29tcG9uZW50JztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGVcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbTWluaUNhbGVuZGFyQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW01pbmlDYWxlbmRhckNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgTWluaUNhbGVuZGFyTW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsTUFLYSxtQkFBbUI7SUFFOUIsaUJBQWlCOzs7WUFMbEIsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7Ozs7Ozs7O0FDSkQ7TUFFTSxNQUFNLEdBQUcsT0FBTztBQU90QixNQUFhLHFCQUFxQjs7OztJQVVoQyxZQUFvQixHQUFzQjtRQUF0QixRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQVRqQyxjQUFTLEdBQUcsU0FBUyxDQUFDO1FBQ3RCLG1CQUFjLEdBQUcsTUFBTSxDQUFDO1FBR3ZCLHVCQUFrQixHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7S0FLSjs7OztJQUU5QyxRQUFRO1FBQ04sSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDOztjQUV6QyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLEVBQUU7UUFDL0MsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRS9CLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxF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